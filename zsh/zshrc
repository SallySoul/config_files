######################

# If this is not an interactive session then we don't need to run all this
# In fact, running this could be a problem.
# For scp and the like

if [[ ! $- =~ "i" ]]
then
    return
fi

function col_echo {
    tput setaf $2
    echo $1
    tput sgr0

}

if [ -f /etc/motd ]
then
  cat /etc/motd
fi

col_echo "Running ~/.zshrc ..." 3
PROMPT="%{$(tput setaf 236; tput setab 141)%}%1~:%n%{$(tput sgr0; tput setaf 141)%}î‚° %{$(tput sgr0)%}"

# brew shellenv based on macbook type
if [[ $(uname -m) == 'arm64' ]]; then
  col_echo "Arm Macbook" 3
  export HOMEBREW_PREFIX="/opt/homebrew"
  export HOMEBREW_CELLAR="/opt/homebrew/Cellar"
  export HOMEBREW_REPOSITORY="/opt/homebrew"
  export MANPATH="/opt/homebrew/share/man${MANPATH+:$MANPATH}:"
  export INFOPATH="/opt/homebrew/share/info:${INFOPATH:-}"
  export PKG_CONFIG_PATH="/opt/homebrew/opt/python@3.10/lib/pkgconfig:${PKG_CONFIG_PATH}"
  export LDFLAGS="-L/opt/homebrew/opt/python@3.10/lib ${LDFLAGS}"
else
  col_echo "Intel Macbook" 3
  export HOMEBREW_PREFIX="/usr/local";
  export HOMEBREW_CELLAR="/usr/local/Cellar";
  export HOMEBREW_REPOSITORY="/usr/local/Homebrew";
  export PATH="/usr/local/bin:/usr/local/sbin${PATH+:$PATH}";
  export MANPATH="/usr/local/share/man${MANPATH+:$MANPATH}:";
  export INFOPATH="/usr/local/share/info:${INFOPATH:-}";
fi

col_echo "Homebrew prefix: ${HOMEBREW_PREFIX}" 3

# Completions
zstyle ':completion:*:*:git:*' script ~/config_files/zsh/git-completion.zsh

# Setup system paths
export PATH="/usr/local/bin"
export PATH="/usr/bin:${PATH}"
export PATH="/usr/sbin:${PATH}"
export PATH="/bin:${PATH}"
export PATH="/sbin:${PATH}"
export PATH="/opt/homebrew/bin:${PATH}"
export PATH="/usr/local/smlnj/bin:${PATH}"
export PATH="/opt/homebrew/opt/llvm@17/bin:${PATH}"
export PKG_CONFIG_PATH=""
export CPPFLAGS=""
export LDFLAGS=""
export LD_LIBRARY_PATH=""
export CMAKE_MODULE_PATH=""

# Setup local install
export LD_LIBRARY_PATH="/Users/russell/installed_software/lib"
export PATH="/Users/russell/installed_software/bin:${PATH}"

# Use ~/projects/tools/lib2geom
export CMAKE_MODULE_PATH="/Users/russell/projects/tools/lib2geom;${CMAKE_MODULE_PATH}"

# Use Brew Ruby
export PATH="/opt/homebrew/opt/ruby@2.7/bin:$PATH"

# Update env variables
export PATH="${HOME}/.cargo/bin:${PATH}"
export PATH="${HOME}/.rustup/toolchains/nightly-x86_64-apple-darwin/bin:${PATH}"
export PATH="/usr/local/texlive/2021/bin/universal-darwin:${PATH}"
export SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
export CXX=clang++
export CC=clang
export OMPI_CXX=$CXX
export OMPI_MPICC=$CC

# For Rust builds?
# https://users.rust-lang.org/t/ld-library-not-found-for-lsystem-on-a-mac-monterrey/69741
export PATH=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib:$PATH
export LIBRARY_PATH="$LIBRARY_PATH:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"

# For openMP on M1
export OMP_NUM_THREADS=`sysctl -n hw.perflevel0.physicalcpu`
export KMP_USE_YIELD=0
export OMP_WAIT_POLICY=ACTIVE

# Paraview settings, might help?
export KNOB_MAX_WORKER_THREADS=`sysctl -n hw.perflevel0.physicalcpu`
export OSPRAY_THREADS=`sysctl -n hw.perflevel0.physicalcpu`
alias paraview='/Applications/ParaView-5.11.1.app/Contents/MacOS/paraview'

# Obsidian Home
export OBSIDIAN_HOME="/Users/russell/Library/Mobile Documents/iCloud~md~obsidian/Documents/Research"

# What's this for again?
export EMAIL_ADDRESS='russell.w.bentley@icloud.com'

# Why do we have this again?
export LANG="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_MESSAGES="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

#######################
# Aliases / One Liners
#######################

alias uconn_hpc_login='ssh rwb11001@hpc2.storrs.hpc.uconn.edu'
alias mina_login='ssh bentley@mina.phys.uconn.edu'
alias matlab='/Applications/MATLAB_R2021b.app/bin/matlab'
alias vstool='/Applications/Visual\ Studio.app/Contents/MacOS/vstool'

alias remarkable_login='ssh root@10.11.99.1'

# https://www.youtube.com/watch?v=zJ7WAmX-xpk
alias fix_mission_control='defaults write com.apple.dock mcx-expose-disabled -bool FALSE && killall Dock'

# Fix Steam
#
# Won't Open, just bobs up and down.
# One Mac
# Found fix here:
# https://steamcommunity.com/discussions/forum/2/135509472109954026/
alias 'fixSteam'='rm -rf ~/Library/Application\ Support/Steam'

# use to open stuff with firefox
# macOS only
alias firefox='open -a firefox'

# escalate priviledges
alias e='sudo zsh'

# git aliases
alias gdi='git diff --no-index'
alias gis='git status'
alias gid='git diff | tee /dev/tty | pbcopy'
alias gist='git status && git diff | tee /dev/tty | pbcopy'
alias gim='git commit -a -m'
alias gip='git pull'
alias gitlog='git log --graph'
alias removeUntrackedFiles='sudo git ls-files --others --exclude-standard | xargs rm -rf'
alias fixSubmodules='git submodule update --init --recursive'

function addWorktree {
  git worktree add -b "$1" "../$1" 
}

# conan / INTACT alias
alias conans='conan install -s build_type=Release .. --build=missing'

alias freshbuild='mkdir build && cd build && conans && jmake'
alias jmake='cmake .. -DBUILD_GENERATIVE=ON -DBUILD_CLI=ON -DBUILD_MFEM=ON -DBUILD_TELEMETRY=OFF -DLICENSE_CHECK_TYPE=none && make -j 20'

alias setup_tree='mkdir build && cd build && conans && cmake .. && make -j 20'

# Cargo Aliases
alias ctl='cargo test --color always -- --nocapture 2>&1 | less'
alias cbl='cargo build --color always 2>&1 | less'
alias ccl='cargo clippy --color always --all-targets 2>&1 | less'
function ctltr {
	OUT_LOG=~/temp/out.log
	ERR_LOG=~/temp/err.log

	col_echo "Remove old files ${OUT_LOG} and ${ERR_LOG}" 3
	rm -f $OUT_LOG $ERR_LOG

	col_echo "Touch log files" 3
	touch $OUT_LOG
	touch $ERR_LOG

	col_echo "Run test" 3
	cargo test $1 --release --color always -- --color always --nocapture  2>$ERR_LOG 1>$OUT_LOG

	col_echo "Assemble output" 3
	cat $OUT_LOG $ERR_LOG | less -R
}

function ctlt {
	OUT_LOG=~/temp/out.log
	ERR_LOG=~/temp/err.log

	col_echo "Remove old files ${OUT_LOG} and ${ERR_LOG}" 3
	rm -f $OUT_LOG $ERR_LOG

	col_echo "Touch log files" 3
	touch $OUT_LOG
	touch $ERR_LOG

	col_echo "Run test" 3
	cargo test $1 --color always -- --color always --nocapture  2>$ERR_LOG 1>$OUT_LOG

	col_echo "Assemble output" 3
	cat $OUT_LOG $ERR_LOG | less -R
}

function cel {
    cargo run --release --color always --example $1 2>&1 | less -R
}

function make1l {
	OUT_LOG=~/temp/out.log
	ERR_LOG=~/temp/err.log

	col_echo "Remove old files ${OUT_LOG} and ${ERR_LOG}" 3
	rm -f $OUT_LOG $ERR_LOG

	col_echo "Touch log files" 3
	touch $OUT_LOG
	touch $ERR_LOG

	col_echo "Run make" 3
	make -j 1  2>$ERR_LOG 1>$OUT_LOG

	col_echo "Assemble output" 3
	cat $OUT_LOG $ERR_LOG | less
}

function makel {
	OUT_LOG=~/temp/out.log
	ERR_LOG=~/temp/err.log

	col_echo "Remove old files ${OUT_LOG} and ${ERR_LOG}" 3
	rm -f $OUT_LOG $ERR_LOG

	col_echo "Touch log files" 3
	touch $OUT_LOG
	touch $ERR_LOG

	col_echo "Run make" 3
	make -j 20  2>$ERR_LOG 1>$OUT_LOG

	col_echo "Assemble output" 3
	cat $OUT_LOG $ERR_LOG | less
}

# less always needs color~
alias less='less -R'

# Info / Inspect aliases
alias ip="ifconfig | rg 'inet\s+(\d{3}\.\d{3}\.\d\.\d{3})' -o -r '\$1'"
alias spacereport="du -h -d 2 . | sort -k 1 -h | less"

# exa aliases
env exa 2>&1 > /dev/null
if [ $? -eq 0 ]
then
  col_echo "exa found" 3
  alias ls='exa --all'
  alias ll='exa --all --long --header'
  alias lll='exa --long --header --color=always | less -R'
  alias tree='exa --long --tree -I .git'
  alias mtreel='exa --tree -I .git --color=always | less -R'
  alias treel='exa --long --tree -I .git --color=always | less -R'
else
  col_echo "exa not found" 3
fi

# NeoVim aliases
alias view='nvim -R'
alias vim='nvim'
alias tvim='nvim term://zsh'

# misc aliases
alias fd='fd --hidden'
alias alert='echo "\a"'
alias runSketch='processing-java --sketch=$(pwd) --output=$(pwd)/output --force --run'

# this one gets passed a list of filenames, will return <linecount>\t<filename>
alias len="xargs -n 1 perl -lne 'END { print \"\$.\t\$ARGV\"; }'"

function colors {
    for i in $(seq 0 255)
    do
        tput setaf $i
        echo "Color: $i"
        tput sgr0
    done
}

# edit function makes it easier to change settings
function edit {
    case $1 in
    zsh)
        nvim ~/.zshrc
        source ~/.zshrc
        ;;
    git)
        nvim ~/.gitconfig
        ;;
    tmux)
        nvim ~/.tmux.conf
        tmux source-file ~/.tmux.conf
        ;;
    nvim)
        nvim ~/.config/nvim/init.vim
        ;;
    alacritty)
	      nvim ~/.config/alacritty/alacritty.yml
	      ;;
    ssh)
	      nvim ~/.ssh/config
	      ;;

    *)
        echo "$1 is not in edit ..."
        ;;
    esac
}

# tmux aliases
alias tmls='tmux ls'
alias tmks='tmux kill-server'

# Use to attach to tmux sessions, so that ssh forwarding is enabled
# Note that we only want this behaivor when on an ssh connection
function tmat {
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]
    then
        tmux attach-session -t $1 \; new-window 'source ~/.ssh/latestagent'
    else
        tmux attach-session -t $1
    fi
}

# Poor Man's C++ type finder
# Usage: findType <Type>
function findType {
  rg "(define|struct|class|trait|enum|using)\W*$1"
}

# Run clang-format-10 on all new or modified .cpp or .h files in dir
function formatChanges {
    git status | \
    rg '\W+(modified|new file):\W+([a-zA-Z./]+)' -r '$2' | \
    rg '\.(cpp|h|hpp)$' | \
    xargs -n 1 realpath | \
    xargs clang-format -i --style=file --verbose
}

function formatAll {
    find \
        dm_deliverable core test/src test/inc cli scripts generative \
        '(' -name '*.cpp' -or -name '*.h' -or -name '*.hpp' ')' -exec \
        clang-format -i --style=file --verbose {} ';'

#    find \
#        core test/src test/inc cli scripts \
#        '(' -name '*.cpp' -or -name '*.h' ')' -exec \
#        dos2unix -o {} ';'
}

function format {
    find core test test/inc cli -name '*.cpp' -or -name '*.h' | \
    xargs clang-format-10 -i --style=file
}

# Page colored ripgrep output
function rgl {
    rg $1 --color=always --heading --line-number | less
}

function rgil {
    rg -i $1 --color=always --heading --line-number | less
}

# Source python venv
if [ -f ~/.config/python_venv/bin/activate ]
then
  col_echo "Sourcing pythonv env" 3
  export VIRTUAL_ENV_DISABLE_PROMPT=1
  source ~/.config/python_venv/bin/activate
  unset VIRTUAL_ENV_DISABLE_PROMPT
else
  col_echo "No venv to source" 3
fi

function lastScreenshot {
  dest_path=$1

  pic_path=`ls ~/Pictures/Screenshots -s modified | rg -v 'DS_Store' | tail -n 1 | xargs -I {} echo "/Users/russell/Pictures/Screenshots/{}"`

  col_echo "cp $pic_path to $dest_path" 4
  cp "$pic_path" "$dest_path"
}

function lastBib {
  bib_path=`ls ~/Downloads/* -s modified | rg '.*\.bib|.*\.ris$' | tail -n 1`
  extension=`echo "${bib_path}" | rg ".*\.(...)" -r '$1' -o`
  if [[ $extension == "ris" ]]
  then
    col_echo "ris file: ${bib_path}" 4
    ris2xml "${bib_path}" | xml2bib -b | pbcopy
  else
    col_echo "Bibtex file: ${bib_path}" 4
    cat "${bib_path}" | pbcopy
  fi
}

function lastPdfHere {
  dest_path=`pwd`/$1

  pdf_path=`ls ~/Downloads/*.pdf -s modified | tail -n 1`
  pdf_name=$dest_path:t

  col_echo "pdf name: ${pdf_name}" 4 &&
  col_echo "cp $pdf_path to $dest_path" 4 &&
  cp "$pdf_path" "$dest_path" &&

  ( echo "---" &&
    echo "annotation-target: Papers/pdfs/$pdf_name" &&
    echo "---" ) | \
    pbcopy
  pbpaste
}

function lastMp4Here {
  dest_path=`pwd`/$1

  pdf_path=`ls ~/Downloads/*.mp4 -s modified | tail -n 1`
  pdf_name=$dest_path:t

  col_echo "mp4 name: ${pdf_name}" 4 &&
  col_echo "cp $pdf_path to $dest_path" 4 &&
  cp "$pdf_path" "$dest_path" &&
}

function lastPdf {
  dest_path="${OBSIDIAN_HOME}/Papers/pdfs/$1"

  pdf_path=`ls ~/Downloads/*.pdf -s modified | tail -n 1`
  pdf_name=$dest_path:t

  col_echo "pdf name: ${pdf_name}" 4 &&
  col_echo "cp $pdf_path to $dest_path" 4 &&
  cp "$pdf_path" "$dest_path" &&

  ( echo "---" &&
    echo "annotation-target: Papers/pdfs/$pdf_name" &&
    echo "---" ) | \
    pbcopy
  pbpaste
}

function frame2film {
  ffmpeg \
    -framerate 30 \
    -pattern_type glob \
    -i "$1" \
    -c:v \
    libx264 \
    -pix_fmt yuv420p \
    "$2"
}

function makemovie {
  ffmpeg \
    -framerate 30 \
    -pattern_type glob \
    -i frame* \
    -c:v \
    libx264 \
    -pix_fmt yuv420p \
    "out.mp4"
}



function runtime {
  rg "Code run for ([\d.]+)" \
    slurm-* \
    -o -r '$1' \
    -N -I \
    | sort | awk '{total = total + $1}END{print total / (60 * 60)}'
}

alias drun='docker run -it -v ${PWD}:/app'

alias uconn='cat ~/ucon_sec_for_sure | base64 --decode | pbcopy'

######################
# Done
######################
col_echo "Done ..." 3
